{
    "sourceFile": "src/Entity/User.php",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 11,
            "patches": [
                {
                    "date": 1690632833137,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1690632840385,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -26,9 +26,9 @@\n     private $id;\n \n     /**\n      * @ORM\\Column(type=\"string\", length=180)\n-     * @Groups({\"read:user\",\"write:entreprise\",\"read:entreprise\", \"read:depot\", \"\"})\n+     * @Groups({\"read:user\",\"write:entreprise\",\"read:entreprise\", \"read:depot\", \"read:produit\"})\n      * \n      */\n     \n     private $email;\n"
                },
                {
                    "date": 1692866149549,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -20,15 +20,15 @@\n     /**\n      * @ORM\\Id\n      * @ORM\\GeneratedValue\n      * @ORM\\Column(type=\"integer\")\n-     * @Groups({\"read:user\",\"write:entreprise\",\"read:entreprise\"})\n+     * @Groups({\"read:user\",\"write:entreprise\",\"read:entreprise\", \"read:product\"})\n      */\n     private $id;\n \n     /**\n      * @ORM\\Column(type=\"string\", length=180)\n-     * @Groups({\"read:user\",\"write:entreprise\",\"read:entreprise\", \"read:depot\", \"read:produit\"})\n+     * @Groups({\"read:user\",\"write:entreprise\",\"read:entreprise\", \"read:depot\", \"read:product\")\n      * \n      */\n     \n     private $email;\n@@ -104,8 +104,18 @@\n      * @ORM\\OneToMany(targetEntity=Product::class, mappedBy=\"user\")\n      */\n     private $products;\n \n+    /**\n+     * @ORM\\Column(type=\"boolean\")\n+     */\n+    private $firstActive = false;\n+\n+    /**\n+     * @ORM\\OneToOne(targetEntity=Biography::class, cascade={\"persist\", \"remove\"})\n+     */\n+    private $biography;\n+\n     public function __construct()\n     {\n         $this->depots = new ArrayCollection();\n         $this->simpleProducts = new ArrayCollection();\n@@ -389,5 +399,29 @@\n         }\n \n         return $this;\n     }\n+\n+    public function isFirstActive(): ?bool\n+    {\n+        return $this->firstActive;\n+    }\n+\n+    public function setFirstActive(bool $firstActive): self\n+    {\n+        $this->firstActive = $firstActive;\n+\n+        return $this;\n+    }\n+\n+    public function getBiography(): ?Biography\n+    {\n+        return $this->biography;\n+    }\n+\n+    public function setBiography(?Biography $biography): self\n+    {\n+        $this->biography = $biography;\n+\n+        return $this;\n+    }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1692866154983,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -26,9 +26,9 @@\n     private $id;\n \n     /**\n      * @ORM\\Column(type=\"string\", length=180)\n-     * @Groups({\"read:user\",\"write:entreprise\",\"read:entreprise\", \"read:depot\", \"read:product\")\n+     * @Groups({\"read:user\",\"write:entreprise\",\"read:entreprise\", \"read:depot\", \"read:product\"})\n      * \n      */\n     \n     private $email;\n"
                },
                {
                    "date": 1692866164722,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -104,18 +104,8 @@\n      * @ORM\\OneToMany(targetEntity=Product::class, mappedBy=\"user\")\n      */\n     private $products;\n \n-    /**\n-     * @ORM\\Column(type=\"boolean\")\n-     */\n-    private $firstActive = false;\n-\n-    /**\n-     * @ORM\\OneToOne(targetEntity=Biography::class, cascade={\"persist\", \"remove\"})\n-     */\n-    private $biography;\n-\n     public function __construct()\n     {\n         $this->depots = new ArrayCollection();\n         $this->simpleProducts = new ArrayCollection();\n@@ -399,29 +389,5 @@\n         }\n \n         return $this;\n     }\n-\n-    public function isFirstActive(): ?bool\n-    {\n-        return $this->firstActive;\n-    }\n-\n-    public function setFirstActive(bool $firstActive): self\n-    {\n-        $this->firstActive = $firstActive;\n-\n-        return $this;\n-    }\n-\n-    public function getBiography(): ?Biography\n-    {\n-        return $this->biography;\n-    }\n-\n-    public function setBiography(?Biography $biography): self\n-    {\n-        $this->biography = $biography;\n-\n-        return $this;\n-    }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1693208307412,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -104,8 +104,18 @@\n      * @ORM\\OneToMany(targetEntity=Product::class, mappedBy=\"user\")\n      */\n     private $products;\n \n+    /**\n+     * @ORM\\OneToOne(targetEntity=Biography::class, mappedBy=\"user\", cascade={\"persist\", \"remove\"})\n+     */\n+    private $biography;\n+\n+    /**\n+     * @ORM\\Column(type=\"boolean\")\n+     */\n+    private $firstActive = false;\n+\n     public function __construct()\n     {\n         $this->depots = new ArrayCollection();\n         $this->simpleProducts = new ArrayCollection();\n@@ -389,5 +399,39 @@\n         }\n \n         return $this;\n     }\n+\n+    public function getBiography(): ?Biography\n+    {\n+        return $this->biography;\n+    }\n+\n+    public function setBiography(?Biography $biography): self\n+    {\n+        // unset the owning side of the relation if necessary\n+        if ($biography === null && $this->biography !== null) {\n+            $this->biography->setUser(null);\n+        }\n+\n+        // set the owning side of the relation if necessary\n+        if ($biography !== null && $biography->getUser() !== $this) {\n+            $biography->setUser($this);\n+        }\n+\n+        $this->biography = $biography;\n+\n+        return $this;\n+    }\n+\n+    public function isFirstActive(): ?bool\n+    {\n+        return $this->firstActive;\n+    }\n+\n+    public function setFirstActive(bool $firstActive): self\n+    {\n+        $this->firstActive = $firstActive;\n+\n+        return $this;\n+    }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1694685591565,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -26,9 +26,9 @@\n     private $id;\n \n     /**\n      * @ORM\\Column(type=\"string\", length=180)\n-     * @Groups({\"read:user\",\"write:entreprise\",\"read:entreprise\", \"read:depot\", \"read:product\"})\n+     * @Groups({\"read:user\",\"write:entreprise\",\"read:entreprise\", \"read:depot\", \"read:product\", \"read:notification\"})\n      * \n      */\n     \n     private $email;\n@@ -114,13 +114,19 @@\n      * @ORM\\Column(type=\"boolean\")\n      */\n     private $firstActive = false;\n \n+    /**\n+     * @ORM\\OneToMany(targetEntity=Notification::class, mappedBy=\"idUser\")\n+     */\n+    private $notifications;\n+\n     public function __construct()\n     {\n         $this->depots = new ArrayCollection();\n         $this->simpleProducts = new ArrayCollection();\n         $this->products = new ArrayCollection();\n+        $this->notifications = new ArrayCollection();\n     }\n \n     public function getId(): ?int\n     {\n@@ -433,5 +439,35 @@\n         $this->firstActive = $firstActive;\n \n         return $this;\n     }\n+\n+    /**\n+     * @return Collection<int, Notification>\n+     */\n+    public function getNotifications(): Collection\n+    {\n+        return $this->notifications;\n+    }\n+\n+    public function addNotification(Notification $notification): self\n+    {\n+        if (!$this->notifications->contains($notification)) {\n+            $this->notifications[] = $notification;\n+            $notification->setIdUser($this);\n+        }\n+\n+        return $this;\n+    }\n+\n+    public function removeNotification(Notification $notification): self\n+    {\n+        if ($this->notifications->removeElement($notification)) {\n+            // set the owning side to null (unless already changed)\n+            if ($notification->getIdUser() === $this) {\n+                $notification->setIdUser(null);\n+            }\n+        }\n+\n+        return $this;\n+    }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1694685623949,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -26,9 +26,9 @@\n     private $id;\n \n     /**\n      * @ORM\\Column(type=\"string\", length=180)\n-     * @Groups({\"read:user\",\"write:entreprise\",\"read:entreprise\", \"read:depot\", \"read:product\", \"read:notification\"})\n+     * @Groups({\"read:user\",\"write:entreprise\",\"read:entreprise\", \"read:depot\", \"read:product\"})\n      * \n      */\n     \n     private $email;\n"
                },
                {
                    "date": 1694685991734,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -26,9 +26,9 @@\n     private $id;\n \n     /**\n      * @ORM\\Column(type=\"string\", length=180)\n-     * @Groups({\"read:user\",\"write:entreprise\",\"read:entreprise\", \"read:depot\", \"read:product\"})\n+     * @Groups({\"read:user\",\"write:entreprise\",\"read:entreprise\", \"read:depot\", \"read:product\"@Groups({\"read:notification\"})})\n      * \n      */\n     \n     private $email;\n"
                },
                {
                    "date": 1694685998736,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -26,9 +26,9 @@\n     private $id;\n \n     /**\n      * @ORM\\Column(type=\"string\", length=180)\n-     * @Groups({\"read:user\",\"write:entreprise\",\"read:entreprise\", \"read:depot\", \"read:product\"@Groups({\"read:notification\"})})\n+     * @Groups({\"read:user\",\"write:entreprise\",\"read:entreprise\", \"read:depot\", \"read:product\", \"read:product\"})\n      * \n      */\n     \n     private $email;\n"
                },
                {
                    "date": 1694686003858,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -26,9 +26,9 @@\n     private $id;\n \n     /**\n      * @ORM\\Column(type=\"string\", length=180)\n-     * @Groups({\"read:user\",\"write:entreprise\",\"read:entreprise\", \"read:depot\", \"read:product\", \"read:product\"})\n+     * @Groups({\"read:user\",\"write:entreprise\",\"read:entreprise\", \"read:depot\", \"read:product\", \"read:notification\"})\n      * \n      */\n     \n     private $email;\n"
                },
                {
                    "date": 1694686037806,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -20,9 +20,9 @@\n     /**\n      * @ORM\\Id\n      * @ORM\\GeneratedValue\n      * @ORM\\Column(type=\"integer\")\n-     * @Groups({\"read:user\",\"write:entreprise\",\"read:entreprise\", \"read:product\"})\n+     * @Groups({\"read:user\",\"write:entreprise\",\"read:entreprise\", \"read:product\", \"read:notification\"})\n      */\n     private $id;\n \n     /**\n"
                }
            ],
            "date": 1690632833137,
            "name": "Commit-0",
            "content": "<?php\n\nnamespace App\\Entity;\n\nuse App\\Repository\\UserRepository;\nuse ApiPlatform\\Core\\Annotation\\ApiResource;\nuse Doctrine\\Common\\Collections\\ArrayCollection;\nuse Doctrine\\Common\\Collections\\Collection;\nuse Doctrine\\ORM\\Mapping as ORM;\nuse Symfony\\Component\\Security\\Core\\User\\PasswordAuthenticatedUserInterface;\nuse Symfony\\Component\\Security\\Core\\User\\UserInterface;\nuse Symfony\\Component\\Serializer\\Annotation\\Groups;\n\n/**\n * @ORM\\Entity(repositoryClass=UserRepository::class)\n */\n\nclass User implements UserInterface, PasswordAuthenticatedUserInterface\n{\n    /**\n     * @ORM\\Id\n     * @ORM\\GeneratedValue\n     * @ORM\\Column(type=\"integer\")\n     * @Groups({\"read:user\",\"write:entreprise\",\"read:entreprise\"})\n     */\n    private $id;\n\n    /**\n     * @ORM\\Column(type=\"string\", length=180)\n     * @Groups({\"read:user\",\"write:entreprise\",\"read:entreprise\", \"read:depot\", \"\"})\n     * \n     */\n    \n    private $email;\n\n    /**\n     * @ORM\\Column(type=\"json\")\n     * @Groups({\"read:user\",\"write:entreprise\",\"read:entreprise\"})\n     */\n    private $roles = [];\n\n    /**\n     * @var string The hashed password\n     * @ORM\\Column(type=\"string\")\n     * @Groups({\"read:user\",\"write:entreprise\",\"read:entreprise\"})\n     */\n    private $password;\n\n\n\n    /**\n     * @ORM\\Column(type=\"boolean\")\n     * @Groups({\"read:user\",\"write:entreprise\",\"read:entreprise\"})\n     */\n    private $confirm = false;\n\n    /**\n     * @ORM\\Column(type=\"boolean\")\n     * @Groups({\"read:user\",\"write:entreprise\",\"read:entreprise\"})\n     */\n    private $enable = false;\n\n    /**\n     * @ORM\\Column(type=\"string\", length=255)\n     * @Groups({\"read:fournisseur\",\"write:entreprise\",\"read:entreprise\",\"read:user\"})\n     */\n    private $token;\n\n    /**\n     * @ORM\\Column(type=\"string\", length=255, nullable=true)\n     * @Groups({\"read:user\",\"write:entreprise\",\"read:entreprise\"})\n     */\n    private $civility;\n\n    /**\n     * @ORM\\Column(type=\"string\", length=255, nullable=true)\n     * @Groups({\"read:user\",\"write:entreprise\",\"read:entreprise\"})\n     */\n    private $nomComplet;\n\n    /**\n     * @ORM\\Column(type=\"string\", length=255)\n     * @Groups({\"read:user\",\"write:entreprise\",\"read:entreprise\"})\n     */\n    private $tel;\n\n    /**\n     * @ORM\\ManyToOne(targetEntity=Entreprise::class, inversedBy=\"users\", cascade={\"persist\"})\n     * @Groups({\"read:user\"})\n     */\n    private $entreprise;\n\n    /**\n     * @ORM\\OneToMany(targetEntity=Depot::class, mappedBy=\"user\")\n     */\n    private $depots;\n\n    /**\n     * @ORM\\OneToMany(targetEntity=SimpleProduct::class, mappedBy=\"user\")\n     */\n    private $simpleProducts;\n\n    /**\n     * @ORM\\OneToMany(targetEntity=Product::class, mappedBy=\"user\")\n     */\n    private $products;\n\n    public function __construct()\n    {\n        $this->depots = new ArrayCollection();\n        $this->simpleProducts = new ArrayCollection();\n        $this->products = new ArrayCollection();\n    }\n\n    public function getId(): ?int\n    {\n        return $this->id;\n    }\n\n    public function setId(?int $id): self\n    {\n        $this->id = $id;\n\n        return $this;\n    }\n    \n    public function getEmail(): ?string\n    {\n        return $this->email;\n    }\n\n    public function setEmail(string $email): self\n    {\n        $this->email = $email;\n\n        return $this;\n    }\n\n    /**\n     * A visual identifier that represents this user.\n     *\n     * @see UserInterface\n     */\n    public function getUserIdentifier(): string\n    {\n        return (string) $this->email;\n    }\n\n    /**\n     * @deprecated since Symfony 5.3, use getUserIdentifier instead\n     */\n    public function getUsername(): string\n    {\n        return (string) $this->email;\n    }\n\n    /**\n     * @see UserInterface\n     */\n    public function getRoles(): array\n    {\n        $roles = $this->roles;\n        // guarantee every user at least has ROLE_USER\n        $roles[] = 'ROLE_USER';\n\n        return array_unique($roles);\n    }\n\n    public function setRoles(array $roles): self\n    {\n        $this->roles = $roles;\n\n        return $this;\n    }\n\n    /**\n     * @see PasswordAuthenticatedUserInterface\n     */\n    public function getPassword(): ?string\n    {\n        return $this->password;\n    }\n\n    public function setPassword(string $password): self\n    {\n        $this->password = $password;\n\n        return $this;\n    }\n\n    /**\n     * Returning a salt is only needed, if you are not using a modern\n     * hashing algorithm (e.g. bcrypt or sodium) in your security.yaml.\n     *\n     * @see UserInterface\n     */\n    public function getSalt(): ?string\n    {\n        return null;\n    }\n\n    /**\n     * @see UserInterface\n     */\n    public function eraseCredentials()\n    {\n        // If you store any temporary, sensitive data on the user, clear it here\n        // $this->plainPassword = null;\n    }\n\n    public function isConfirm(): ?bool\n    {\n        return $this->confirm;\n    }\n\n    public function setConfirm(bool $confirm): self\n    {\n        $this->confirm = $confirm;\n\n        return $this;\n    }\n\n    public function isEnable(): ?bool\n    {\n        return $this->enable;\n    }\n\n    public function setEnable(bool $enable): self\n    {\n        $this->enable = $enable;\n\n        return $this;\n    }\n\n    /**\n     * @ORM\\PrePersist\n     */\n    public function generateToken(): void\n    {\n        $this->token = bin2hex(random_bytes(32));\n    }\n\n    public function getToken(): ?string\n    {\n        return $this->token;\n    }\n\n    public function setToken(string $token): self\n    {\n        $this->token = $token;\n\n        return $this;\n    }\n\n    public function getCivility(): ?string\n    {\n        return $this->civility;\n    }\n\n    public function setCivility(? string $civility): self\n    {\n        $this->civility = $civility;\n\n        return $this;\n    }\n\n    public function getNomComplet(): ?string\n    {\n        return $this->nomComplet;\n    }\n\n    public function setNomComplet(?string $nomComplet): self\n    {\n        $this->nomComplet = $nomComplet;\n\n        return $this;\n    }\n\n    public function getTel(): ?string\n    {\n        return $this->tel;\n    }\n\n    public function setTel(string $tel): self\n    {\n        $this->tel = $tel;\n\n        return $this;\n    }\n\n    public function getEntreprise(): ?Entreprise\n    {\n        return $this->entreprise;\n    }\n\n    public function setEntreprise(?Entreprise $entreprise): self\n    {\n        $this->entreprise = $entreprise;\n\n        return $this;\n    }\n \n\n    /**\n     * @return Collection<int, Depot>\n     */\n    public function getDepots(): Collection\n    {\n        return $this->depots;\n    }\n\n    public function addDepot(Depot $depot): self\n    {\n        if (!$this->depots->contains($depot)) {\n            $this->depots[] = $depot;\n            $depot->setUser($this);\n        }\n\n        return $this;\n    }\n\n    public function removeDepot(Depot $depot): self\n    {\n        if ($this->depots->removeElement($depot)) {\n            // set the owning side to null (unless already changed)\n            if ($depot->getUser() === $this) {\n                $depot->setUser(null);\n            }\n        }\n\n        return $this;\n    }\n\n    /**\n     * @return Collection<int, SimpleProduct>\n     */\n    public function getSimpleProducts(): Collection\n    {\n        return $this->simpleProducts;\n    }\n\n    public function addSimpleProduct(SimpleProduct $simpleProduct): self\n    {\n        if (!$this->simpleProducts->contains($simpleProduct)) {\n            $this->simpleProducts[] = $simpleProduct;\n            $simpleProduct->setUser($this);\n        }\n\n        return $this;\n    }\n\n    public function removeSimpleProduct(SimpleProduct $simpleProduct): self\n    {\n        if ($this->simpleProducts->removeElement($simpleProduct)) {\n            // set the owning side to null (unless already changed)\n            if ($simpleProduct->getUser() === $this) {\n                $simpleProduct->setUser(null);\n            }\n        }\n\n        return $this;\n    }\n\n    /**\n     * @return Collection<int, Product>\n     */\n    public function getProducts(): Collection\n    {\n        return $this->products;\n    }\n\n    public function addProduct(Product $product): self\n    {\n        if (!$this->products->contains($product)) {\n            $this->products[] = $product;\n            $product->setUser($this);\n        }\n\n        return $this;\n    }\n\n    public function removeProduct(Product $product): self\n    {\n        if ($this->products->removeElement($product)) {\n            // set the owning side to null (unless already changed)\n            if ($product->getUser() === $this) {\n                $product->setUser(null);\n            }\n        }\n\n        return $this;\n    }\n}"
        }
    ]
}
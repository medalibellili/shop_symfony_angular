{
    "sourceFile": "src/Entity/Product.php",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 2,
            "patches": [
                {
                    "date": 1690632900940,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1690632912810,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -101,9 +101,9 @@\n \n     /**\n      * @ORM\\ManyToOne(targetEntity=User::class, inversedBy=\"products\", cascade={\"persist\"})\n      * @ORM\\JoinColumn(name=\"user_id\", referencedColumnName=\"id\")\n-     * @Groups({\"read:user\",\"write:entreprise\",\"read:entreprise\", \"read:depot\", \"read:product\"})\n+     * @Groups({\"read:user\"})\n      */\n     private $user;\n \n     /**\n"
                },
                {
                    "date": 1690632936049,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -101,9 +101,9 @@\n \n     /**\n      * @ORM\\ManyToOne(targetEntity=User::class, inversedBy=\"products\", cascade={\"persist\"})\n      * @ORM\\JoinColumn(name=\"user_id\", referencedColumnName=\"id\")\n-     * @Groups({\"read:user\"})\n+     * @Groups({\"read:product\"})\n      */\n     private $user;\n \n     /**\n"
                }
            ],
            "date": 1690632900940,
            "name": "Commit-0",
            "content": "<?php\n\nnamespace App\\Entity;\n\nuse App\\Repository\\ProductRepository;\nuse Doctrine\\Common\\Collections\\ArrayCollection;\nuse Doctrine\\Common\\Collections\\Collection;\nuse Doctrine\\ORM\\Mapping as ORM;\nuse Symfony\\Component\\Serializer\\Annotation\\Groups;\n\n/**\n * @ORM\\Entity(repositoryClass=ProductRepository::class)\n */\nclass Product\n{\n    /**\n     * @ORM\\Id\n     * @ORM\\GeneratedValue\n     * @ORM\\Column(type=\"integer\")\n     * @Groups({\"write:product\",\"read:product\", \"read:withStock\"})\n     */\n    private $id;\n\n    /**\n     * @ORM\\Column(type=\"string\", length=255, nullable = true)\n     * @Groups({\"write:product\",\"read:product\", \"read:withStock\"})\n     */\n    private $idOdoo;\n\n    /**\n     * @ORM\\Column(type=\"string\", length=255, nullable = true)\n     * @Groups({\"write:product\",\"read:product\", \"read:withStock\"})\n     */\n    private $nomProduit;\n\n    /**\n     * @ORM\\Column(type=\"string\", length=255, nullable = true)\n     * @Groups({\"write:product\",\"read:product\", \"read:withStock\"})\n     */\n    private $shortDescription;\n\n    /**\n     * @ORM\\Column(type=\"string\", length=255, nullable = true)\n     * @Groups({\"write:product\",\"read:product\", \"read:withStock\"})\n     */\n    private $longDescription;\n\n    /**\n     * @ORM\\Column(type=\"string\", length=255, nullable = true)\n     * @Groups({\"write:product\",\"read:product\", \"read:withStock\"})\n     */\n    private $photoProduit;\n\n    /**\n     * @ORM\\Column(type=\"string\", length=255, nullable = true)\n     * @Groups({\"write:product\",\"read:product\", \"read:withStock\"})\n     */\n    private $linkVideo;\n\n    /**\n     * @ORM\\ManyToMany(targetEntity=Category::class, inversedBy=\"products\", cascade={\"persist\",\"remove\"})\n     * @Groups({\"write:product\",\"read:product\"})\n     */\n    private $categories;\n\n    /**\n     * @ORM\\Column(type=\"string\", length=255, nullable = true)\n     * @Groups({\"write:product\",\"read:product\", \"read:withStock\"})\n     */\n    private $type;\n\n    /**\n     * @ORM\\Column(type=\"string\", length=255, nullable = true)\n     * @Groups({\"write:product\",\"read:product\", \"read:withStock\"})\n     */\n    private $slug;\n\n    /**\n     * @ORM\\Column(type=\"string\", length=255, nullable = true)\n     * @Groups({\"write:product\",\"read:product\", \"read:withStock\"})\n     */\n    private $metaTitle;\n\n    /**\n     * @ORM\\Column(type=\"string\", length=255, nullable = true)\n     * @Groups({\"write:product\",\"read:product\", \"read:withStock\"})\n     */\n    private $metaDescription;\n\n    /**\n     * @ORM\\Column(type=\"string\", length=255, nullable = true)\n     * @Groups({\"write:product\",\"read:product\", \"read:withStock\"})\n     */\n    private $metaKeyword;\n\n    /**\n     * @ORM\\OneToOne(targetEntity=SimpleProduct::class, mappedBy=\"simples\", cascade={\"persist\", \"remove\"})\n     * @Groups({\"write:product\",\"read:product\", \"read:withStock\"})\n     */\n    private $simpleProduct;\n\n    /**\n     * @ORM\\ManyToOne(targetEntity=User::class, inversedBy=\"products\", cascade={\"persist\"})\n     * @ORM\\JoinColumn(name=\"user_id\", referencedColumnName=\"id\")\n     * @Groups({\"read:user\",\"write:entreprise\",\"read:entreprise\", \"read:depot\", \"read:product\"})\n     */\n    private $user;\n\n    /**\n     * @ORM\\Column(type=\"boolean\")\n     * @Groups({\"write:product\",\"read:product\", \"read:withStock\"})\n     */\n    private $status;\n\n    /**\n     * @ORM\\Column(type=\"string\", length=255, nullable = true)\n     * @Groups({\"write:product\",\"read:product\", \"read:withStock\"})\n     */\n    private $reference;\n\n    public function __construct()\n    {\n        $this->categories = new ArrayCollection();\n    }\n\n    public function getId(): ?int\n    {\n        return $this->id;\n    }\n\n    public function setId(?int $id): self\n    {\n        $this->id = $id;\n\n        return $this;\n    }\n\n    public function getIdOdoo(): ?string\n    {\n        return $this->idOdoo;\n    }\n\n    public function setIdOdoo(?string $idOdoo): self\n    {\n        $this->idOdoo = $idOdoo;\n\n        return $this;\n    }\n\n    public function getNomProduit(): ?string\n    {\n        return $this->nomProduit;\n    }\n\n    public function setNomProduit(string $nomProduit): self\n    {\n        $this->nomProduit = $nomProduit;\n\n        return $this;\n    }\n\n    public function getShortDescription(): ?string\n    {\n        return $this->shortDescription;\n    }\n\n    public function setShortDescription(string $shortDescription): self\n    {\n        $this->shortDescription = $shortDescription;\n\n        return $this;\n    }\n\n    public function getLongDescription(): ?string\n    {\n        return $this->longDescription;\n    }\n\n    public function setLongDescription(string $longDescription): self\n    {\n        $this->longDescription = $longDescription;\n\n        return $this;\n    }\n\n    public function getPhotoProduit(): ?string\n    {\n        return $this->photoProduit;\n    }\n\n    public function setPhotoProduit(string $photoProduit): self\n    {\n        $this->photoProduit = $photoProduit;\n\n        return $this;\n    }\n\n    public function getLinkVideo(): ?string\n    {\n        return $this->linkVideo;\n    }\n\n    public function setLinkVideo(string $linkVideo): self\n    {\n        $this->linkVideo = $linkVideo;\n\n        return $this;\n    }\n\n    /**\n     * @return Collection<int, Category>\n     */\n    public function getCategories(): Collection\n    {\n        return $this->categories;\n    }\n\n    public function addCategory(Category $category): self\n    {\n        if (!$this->categories->contains($category)) {\n            $this->categories[] = $category;\n        }\n\n        return $this;\n    }\n\n    public function removeCategory(Category $category): self\n    {\n        $this->categories->removeElement($category);\n\n        return $this;\n    }\n\n    public function getType(): ?string\n    {\n        return $this->type;\n    }\n\n    public function setType(string $type): self\n    {\n        $this->type = $type;\n\n        return $this;\n    }\n\n    public function getSlug(): ?string\n    {\n        return $this->slug;\n    }\n\n    public function setSlug(string $slug): self\n    {\n        $this->slug = $slug;\n\n        return $this;\n    }\n\n    public function getMetaTitle(): ?string\n    {\n        return $this->metaTitle;\n    }\n\n    public function setMetaTitle(string $metaTitle): self\n    {\n        $this->metaTitle = $metaTitle;\n\n        return $this;\n    }\n\n    public function getMetaDescription(): ?string\n    {\n        return $this->metaDescription;\n    }\n\n    public function setMetaDescription(string $metaDescription): self\n    {\n        $this->metaDescription = $metaDescription;\n\n        return $this;\n    }\n\n    public function getMetaKeyword(): ?string\n    {\n        return $this->metaKeyword;\n    }\n\n    public function setMetaKeyword(string $metaKeyword): self\n    {\n        $this->metaKeyword = $metaKeyword;\n\n        return $this;\n    }\n\n    public function getSimpleProduct(): ?SimpleProduct\n    {\n        return $this->simpleProduct;\n    }\n\n    public function setSimpleProduct(?SimpleProduct $simpleProduct): self\n    {\n        // unset the owning side of the relation if necessary\n        if ($simpleProduct === null && $this->simpleProduct !== null) {\n            $this->simpleProduct->setSimples(null);\n        }\n\n        // set the owning side of the relation if necessary\n        if ($simpleProduct !== null && $simpleProduct->getSimples() !== $this) {\n            $simpleProduct->setSimples($this);\n        }\n\n        $this->simpleProduct = $simpleProduct;\n\n        return $this;\n    }\n\n    public function getUser(): ?User\n    {\n        return $this->user;\n    }\n\n    public function setUser(?User $user): self\n    {\n        $this->user = $user;\n\n        return $this;\n    }\n\n    public function isStatus(): ?bool\n    {\n        return $this->status;\n    }\n\n    public function setStatus(bool $status): self\n    {\n        $this->status = $status;\n\n        return $this;\n    }\n\n    public function getReference(): ?string\n    {\n        return $this->reference;\n    }\n\n    public function setReference(string $reference): self\n    {\n        $this->reference = $reference;\n\n        return $this;\n    }\n\n\n  \n\n     \n}"
        }
    ]
}
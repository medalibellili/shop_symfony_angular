{
    "sourceFile": "src/Controller/UserController.php",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 17,
            "patches": [
                {
                    "date": 1690963990174,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1692349517051,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -63,8 +63,9 @@\n         //$object->setEntreprise($find);\n         $object->setPassword($encoded);\n         $object->setRoles([\"ROLE_ADMIN\"]);\n         // Persister l'objet User et les utilisateurs\n+        \n         $em->persist($object);\n         $em-> flush();\n         return $this->json(\"success\", JsonResponse::HTTP_OK);\n     }\n@@ -158,9 +159,9 @@\n      */\n     public function getProductByUser(Request $request, EntityManagerInterface $em): Response\n     {\n         $item=json_decode($request->getContent(),true);\n-        $user = $em->getRepository(User::class)->findOneBy([\"email\"=>$item[\"email\"]]);\n+        $user = $em->getRepository(User::class)->findBy([\"email\"=>$item[\"email\"]]);\n         $product = $em->getRepository(Product::class)->findBy([\"user\"=>$user]);\n         return $this->json($product,200, [], ['groups' => 'read:product']);\n     }\n \n"
                },
                {
                    "date": 1692349527434,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -63,9 +63,9 @@\n         //$object->setEntreprise($find);\n         $object->setPassword($encoded);\n         $object->setRoles([\"ROLE_ADMIN\"]);\n         // Persister l'objet User et les utilisateurs\n-        \n+        $biography\n         $em->persist($object);\n         $em-> flush();\n         return $this->json(\"success\", JsonResponse::HTTP_OK);\n     }\n"
                },
                {
                    "date": 1692349536101,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -41,8 +41,9 @@\n         $encoded = $passwordHasher->hashPassword($object, $object->getPassword());\n         $object->setPassword($encoded);\n         $object->setEntreprise($find);\n         // Persister l'objet User et les utilisateurs\n+        \n         $em->persist($object);\n         $em-> flush();\n         return $this->json(\"success\", JsonResponse::HTTP_OK);\n     }\n@@ -63,9 +64,9 @@\n         //$object->setEntreprise($find);\n         $object->setPassword($encoded);\n         $object->setRoles([\"ROLE_ADMIN\"]);\n         // Persister l'objet User et les utilisateurs\n-        $biography\n+        \n         $em->persist($object);\n         $em-> flush();\n         return $this->json(\"success\", JsonResponse::HTTP_OK);\n     }\n"
                },
                {
                    "date": 1692349542449,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -41,9 +41,9 @@\n         $encoded = $passwordHasher->hashPassword($object, $object->getPassword());\n         $object->setPassword($encoded);\n         $object->setEntreprise($find);\n         // Persister l'objet User et les utilisateurs\n-        \n+        $biogrp\n         $em->persist($object);\n         $em-> flush();\n         return $this->json(\"success\", JsonResponse::HTTP_OK);\n     }\n"
                },
                {
                    "date": 1692349548902,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -41,10 +41,9 @@\n         $encoded = $passwordHasher->hashPassword($object, $object->getPassword());\n         $object->setPassword($encoded);\n         $object->setEntreprise($find);\n         // Persister l'objet User et les utilisateurs\n-        $biogrp\n-        $em->persist($object);\n+         $em->persist($object);\n         $em-> flush();\n         return $this->json(\"success\", JsonResponse::HTTP_OK);\n     }\n \n"
                },
                {
                    "date": 1692694381432,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -43,8 +43,9 @@\n         $object->setEntreprise($find);\n         // Persister l'objet User et les utilisateurs\n          $em->persist($object);\n         $em-> flush();\n+        \n         return $this->json(\"success\", JsonResponse::HTTP_OK);\n     }\n \n \n"
                },
                {
                    "date": 1692694895436,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -40,8 +40,10 @@\n         $object->generateToken();\n         $encoded = $passwordHasher->hashPassword($object, $object->getPassword());\n         $object->setPassword($encoded);\n         $object->setEntreprise($find);\n+        //\n+       \n         // Persister l'objet User et les utilisateurs\n          $em->persist($object);\n         $em-> flush();\n         \n"
                },
                {
                    "date": 1692694912934,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -45,8 +45,14 @@\n        \n         // Persister l'objet User et les utilisateurs\n          $em->persist($object);\n         $em-> flush();\n+\n+        $biography = new Biography();\n+        //$biography->setName(\"test\");\n+        $biography->setUser($object);\n+        $em->persist($biography);\n+        $em-> flush();\n         \n         return $this->json(\"success\", JsonResponse::HTTP_OK);\n     }\n \n"
                },
                {
                    "date": 1692695424977,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -47,9 +47,9 @@\n          $em->persist($object);\n         $em-> flush();\n \n         $biography = new Biography();\n-        //$biography->setName(\"test\");\n+        $biography->setName(\"test\");\n         $biography->setUser($object);\n         $em->persist($biography);\n         $em-> flush();\n         \n"
                },
                {
                    "date": 1692695437752,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -47,9 +47,9 @@\n          $em->persist($object);\n         $em-> flush();\n \n         $biography = new Biography();\n-        $biography->setName(\"test\");\n+        //$biography->setName(\"test\");\n         $biography->setUser($object);\n         $em->persist($biography);\n         $em-> flush();\n         \n"
                },
                {
                    "date": 1692695470066,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -44,9 +44,9 @@\n         //\n        \n         // Persister l'objet User et les utilisateurs\n          $em->persist($object);\n-        $em-> flush();\n+       // $em-> flush();\n \n         $biography = new Biography();\n         //$biography->setName(\"test\");\n         $biography->setUser($object);\n"
                },
                {
                    "date": 1692695505598,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -47,9 +47,9 @@\n          $em->persist($object);\n        // $em-> flush();\n \n         $biography = new Biography();\n-        //$biography->setName(\"test\");\n+        $biography->setName(\"test\");\n         $biography->setUser($object);\n         $em->persist($biography);\n         $em-> flush();\n         \n"
                },
                {
                    "date": 1692695521368,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -47,9 +47,9 @@\n          $em->persist($object);\n        // $em-> flush();\n \n         $biography = new Biography();\n-        $biography->setName(\"test\");\n+        //$biography->setName(\"test\");\n         $biography->setUser($object);\n         $em->persist($biography);\n         $em-> flush();\n         \n"
                },
                {
                    "date": 1692696581407,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -44,9 +44,9 @@\n         //\n        \n         // Persister l'objet User et les utilisateurs\n          $em->persist($object);\n-       // $em-> flush();\n+        $em-> flush();\n \n         $biography = new Biography();\n         //$biography->setName(\"test\");\n         $biography->setUser($object);\n"
                },
                {
                    "date": 1692712500089,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -13,8 +13,11 @@\n use Symfony\\Component\\HttpFoundation\\Request;\n use Symfony\\Component\\PasswordHasher\\Hasher\\UserPasswordHasherInterface;\n use Symfony\\Component\\Serializer\\Normalizer\\AbstractNormalizer;\n use Symfony\\Component\\Serializer\\SerializerInterface;\n+use Symfony\\Component\\Mailer\\MailerInterface;\n+use Symfony\\Component\\Mime\\Email;\n+use Symfony\\Bridge\\Twig\\Mime\\TemplatedEmail;\n  \n class UserController extends AbstractController\n {\n     /**\n@@ -35,9 +38,10 @@\n         $jsonData = json_decode($request->getContent(), true);\n         $find = $em->getRepository(Entreprise::class)->findOneBy([\"id\"=>$jsonData[\"entreprise\"][\"id\"]]);\n              // Désérialiser l'objet User à partir des données JSON\n         $object = $serializer->deserialize($request->getContent(), User::class, 'json',[\"groups\"=> \"read:user\"]);\n-         $object->setEnable(false);\n+        $object->setEnable(false);\n+        //$object->setFirstActive(false);\n         $object->generateToken();\n         $encoded = $passwordHasher->hashPassword($object, $object->getPassword());\n         $object->setPassword($encoded);\n         $object->setEntreprise($find);\n@@ -75,8 +79,9 @@\n         // Persister l'objet User et les utilisateurs\n         \n         $em->persist($object);\n         $em-> flush();\n+        \n         return $this->json(\"success\", JsonResponse::HTTP_OK);\n     }\n \n    /**\n@@ -103,12 +108,12 @@\n \n     /**\n      * @Route(\"/api/users/{id}\", name=\"app_edit_user\", methods={\"PUT\"})\n      */\n-    public function editUsers($id, Request $request, SerializerInterface $serializer, EntityManagerInterface $em, UserPasswordHasherInterface $passwordHasher): Response\n+    public function editUsers($id, Request $request, SerializerInterface $serializer, EntityManagerInterface $em, UserPasswordHasherInterface $passwordHasher, MailerInterface $mailer): Response\n     {\n         $user = $em->getRepository(User::class)->findOneBy([\"id\"=>$id]);\n-        $item=json_decode($request->getContent(),true);\n+        $item=json_decode($request->getContent(),true); \n         if (!$user) {\n             throw $this->createNotFoundException('User introuvable.');\n         }\n         // $entreprise = $serializer->deserialize(\n@@ -130,14 +135,36 @@\n     $user->setNomComplet($item[\"nomComplet\"]);\n     $user->setTel($item[\"tel\"]);\n     \n   //  dd($item[\"entreprise\"]['id']);\n-  if($item[\"entreprise\"] != null){\n+    if($item[\"entreprise\"] != null){\n     $entreprise = $em->getRepository(Entreprise::class)->findOneBy([\"id\"=>$item[\"entreprise\"]['id']]);\n     $user->setEntreprise($entreprise);\n-}\n+    }\n+    if($user->isFirstActive() == false && $user->isEnable() == true){\n+        $user->setFirstActive(true);\n+        $email = (new TemplatedEmail())\n+            ->from('Hirafy.company@gmail.com')\n+            ->to($user->getEmail())\n+            //->cc('cc@example.com')\n+            //->bcc('bcc@example.com')\n+            //->replyTo('fabien@example.com')\n+            //->priority(Email::PRIORITY_HIGH)\n+            ->subject('Activation d\\'email')\n+            ->htmlTemplate('emails/firstActive.html.twig')\n+            // pass variables (name => value) to the template\n+            ->context([\n+                'name'=> $user->getNomComplet()\n+            ]);\n+\n+        $mailer->send($email);\n+        \n+    }\n+\n+    \n              \n         $em->flush();\n+\n         return $this->json($user,200, [], ['groups' => 'read:user']);\n     }\n \n     /**\n"
                },
                {
                    "date": 1692777699523,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -79,9 +79,13 @@\n         // Persister l'objet User et les utilisateurs\n         \n         $em->persist($object);\n         $em-> flush();\n-        \n+        $biography = new Biography();\n+        //$biography->setName(\"test\");\n+        $biography->setUser($object)->getUsers()[0];\n+        $em->persist($biography);\n+        $em-> flush();\n         return $this->json(\"success\", JsonResponse::HTTP_OK);\n     }\n \n    /**\n"
                },
                {
                    "date": 1692777708374,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -81,9 +81,9 @@\n         $em->persist($object);\n         $em-> flush();\n         $biography = new Biography();\n         //$biography->setName(\"test\");\n-        $biography->setUser($object)->getUsers()[0];\n+        $biography->setUser($object);\n         $em->persist($biography);\n         $em-> flush();\n         return $this->json(\"success\", JsonResponse::HTTP_OK);\n     }\n"
                }
            ],
            "date": 1690963990174,
            "name": "Commit-0",
            "content": "<?php\n\nnamespace App\\Controller;\nuse Symfony\\Bundle\\FrameworkBundle\\Controller\\AbstractController;\nuse Symfony\\Component\\HttpFoundation\\Response;\nuse Symfony\\Component\\Routing\\Annotation\\Route;\nuse App\\Entity\\User;\nuse App\\Entity\\Entreprise;\nuse App\\Entity\\Biography;\nuse App\\Entity\\Product;\nuse Doctrine\\ORM\\EntityManagerInterface;\nuse Symfony\\Component\\HttpFoundation\\JsonResponse;\nuse Symfony\\Component\\HttpFoundation\\Request;\nuse Symfony\\Component\\PasswordHasher\\Hasher\\UserPasswordHasherInterface;\nuse Symfony\\Component\\Serializer\\Normalizer\\AbstractNormalizer;\nuse Symfony\\Component\\Serializer\\SerializerInterface;\n \nclass UserController extends AbstractController\n{\n    /**\n     * @Route(\"/user\", name=\"app_user\")\n     */\n    public function index(): Response\n    {\n        return $this->render('user/index.html.twig', [\n            'controller_name' => 'UserController',\n        ]);\n    }\n    \n    /**\n     * @Route(\"/api/users\", name=\"app_create_user\", methods={\"POST\"})\n     */\n    public function createUser(Request $request ,EntityManagerInterface $em ,SerializerInterface $serializer, UserPasswordHasherInterface $passwordHasher): Response\n    {\n        $jsonData = json_decode($request->getContent(), true);\n        $find = $em->getRepository(Entreprise::class)->findOneBy([\"id\"=>$jsonData[\"entreprise\"][\"id\"]]);\n             // Désérialiser l'objet User à partir des données JSON\n        $object = $serializer->deserialize($request->getContent(), User::class, 'json',[\"groups\"=> \"read:user\"]);\n         $object->setEnable(false);\n        $object->generateToken();\n        $encoded = $passwordHasher->hashPassword($object, $object->getPassword());\n        $object->setPassword($encoded);\n        $object->setEntreprise($find);\n        // Persister l'objet User et les utilisateurs\n        $em->persist($object);\n        $em-> flush();\n        return $this->json(\"success\", JsonResponse::HTTP_OK);\n    }\n\n\n    /**\n     * @Route(\"/api/admins\", name=\"app_create_admin\", methods={\"POST\"})\n     */\n    public function createAdmin(Request $request ,EntityManagerInterface $em ,SerializerInterface $serializer, UserPasswordHasherInterface $passwordHasher): Response\n    {\n        $jsonData = json_decode($request->getContent(), true);\n        //$find = $em->getRepository(Entreprise::class)->findOneBy([\"id\"=>$jsonData[\"entreprise\"][\"id\"]]);\n        // Désérialiser l'objet User à partir des données JSON\n        $object = $serializer->deserialize($request->getContent(), User::class, 'json',[\"groups\"=> \"read:user\"]);\n        $object->setEnable(false);\n        $object->generateToken();\n        $encoded = $passwordHasher->hashPassword($object, $object->getPassword());\n        //$object->setEntreprise($find);\n        $object->setPassword($encoded);\n        $object->setRoles([\"ROLE_ADMIN\"]);\n        // Persister l'objet User et les utilisateurs\n        $em->persist($object);\n        $em-> flush();\n        return $this->json(\"success\", JsonResponse::HTTP_OK);\n    }\n\n   /**\n * @Route(\"/api/users\", name=\"app_get_all_user\", methods={\"GET\"})\n */\npublic function getAllUsers(Request $request, EntityManagerInterface $em): Response\n{\n    $userRepository = $em->getRepository(User::class);\n\n    // Récupérez les utilisateurs triés par ordre décroissant d'ID d'insertion\n    $users = $userRepository->findBy([], ['id' => 'DESC']);\n\n    return $this->json($users, 200, [], ['groups' => 'read:user']);\n}\n\n    /**\n     * @Route(\"/api/admins\", name=\"app_get_all_admin\", methods={\"GET\"})\n     */\n    public function getAllAdmins(Request $request, EntityManagerInterface $em): Response\n    {\n        $find = $em->getRepository(User::class)->findAllAdmin(\"ROLE_ADMIN\");\n        return $this->json($find,200, [], ['groups' => 'read:user']);\n    }\n\n    /**\n     * @Route(\"/api/users/{id}\", name=\"app_edit_user\", methods={\"PUT\"})\n     */\n    public function editUsers($id, Request $request, SerializerInterface $serializer, EntityManagerInterface $em, UserPasswordHasherInterface $passwordHasher): Response\n    {\n        $user = $em->getRepository(User::class)->findOneBy([\"id\"=>$id]);\n        $item=json_decode($request->getContent(),true);\n        if (!$user) {\n            throw $this->createNotFoundException('User introuvable.');\n        }\n        // $entreprise = $serializer->deserialize(\n        // $item[\"entreprise\"][0],\n        // Entreprise::class,\n        // 'json'\n        // [ \n        //     AbstractNormalizer::OBJECT_TO_POPULATE =>$entreprise,\n        //     AbstractObjectNormalizer::DEEP_OBJECT_TO_POPULATE => true,\n        // ]\n  //  );\n     $user->setEmail($item[\"email\"]);\n    $user->setRoles($item[\"roles\"]);\n    $encoded = $passwordHasher->hashPassword($user, $item[\"password\"]);\n    $user->setPassword($encoded);\n    $user->setEnable($item[\"enable\"]);\n    // $user->setToken($item[\"token\"]);\n    $user->setCivility($item[\"civility\"]);\n    $user->setNomComplet($item[\"nomComplet\"]);\n    $user->setTel($item[\"tel\"]);\n    \n  //  dd($item[\"entreprise\"]['id']);\n  if($item[\"entreprise\"] != null){\n    $entreprise = $em->getRepository(Entreprise::class)->findOneBy([\"id\"=>$item[\"entreprise\"]['id']]);\n    $user->setEntreprise($entreprise);\n}\n             \n        $em->flush();\n        return $this->json($user,200, [], ['groups' => 'read:user']);\n    }\n\n    /**\n     * @Route(\"/api/users/{id}\", name=\"app_get_user\", methods={\"GET\"})\n     */\n    public function getUserById($id, Request $request, EntityManagerInterface $em): Response\n    {\n        $user = $em->getRepository(User::class)->findOneBy([\"id\"=>$id]);\n        return $this->json($user,200, [], ['groups' => 'read:user']);\n    }\n\n    /**\n     * @Route(\"/api/users/email\", name=\"app_get_user_email\", methods={\"POST\"})\n     */\n    public function getUserByEmail(Request $request, EntityManagerInterface $em): Response\n    {\n        $item=json_decode($request->getContent(),true);\n        $user = $em->getRepository(User::class)->findOneBy([\"email\"=>$item[\"email\"]]);\n        $bio = $em->getRepository(Biography::class)->findOneBy([\"user\"=>$user]);\n        if ($bio == null){\n            $bio = new Biography();\n        }\n        return $this->json($bio,200, [], ['groups' => 'read:biography']);\n    }\n\n     /**\n     * @Route(\"/api/users/product\", name=\"app_get_user_product\", methods={\"POST\"})\n     */\n    public function getProductByUser(Request $request, EntityManagerInterface $em): Response\n    {\n        $item=json_decode($request->getContent(),true);\n        $user = $em->getRepository(User::class)->findOneBy([\"email\"=>$item[\"email\"]]);\n        $product = $em->getRepository(Product::class)->findBy([\"user\"=>$user]);\n        return $this->json($product,200, [], ['groups' => 'read:product']);\n    }\n\n\n    /**\n     * @Route(\"/api/users/{id}\", name=\"app_delete_user\", methods={\"DELETE\"})\n     */\n    public function deleteUser($id, Request $request, EntityManagerInterface $em): Response\n    {\n        $user = $em->getRepository(User::class)->findOneBy([\"id\"=>$id]);\n        $em->remove($user);\n        $em->flush();\n        return $this->json(\"success\", JsonResponse::HTTP_OK);\n    }\n}"
        }
    ]
}
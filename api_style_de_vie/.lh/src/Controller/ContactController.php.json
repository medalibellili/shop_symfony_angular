{
    "sourceFile": "src/Controller/ContactController.php",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 19,
            "patches": [
                {
                    "date": 1691748626030,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1691748632796,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -34,9 +34,9 @@\n         // Désérialiser l'objet Entreprise à partir des données JSON\n         $object = $serializer->deserialize($request->getContent(), Contact::class, 'json');\n         $object->setCreatedAt(new \\DateTime());\n         $object->setStatus(false);\n-        $object->setStatus(false);\n+        $object->setNotification(false);\n         // Persister l'objet Entreprise et les utilisateurs\n         $em->persist($object);\n         $em-> flush();\n         return $this->json(\"success\", JsonResponse::HTTP_OK);\n"
                },
                {
                    "date": 1691751029656,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -34,9 +34,9 @@\n         // Désérialiser l'objet Entreprise à partir des données JSON\n         $object = $serializer->deserialize($request->getContent(), Contact::class, 'json');\n         $object->setCreatedAt(new \\DateTime());\n         $object->setStatus(false);\n-        $object->setNotification(false);\n+        $object->setStatus(false);\n         // Persister l'objet Entreprise et les utilisateurs\n         $em->persist($object);\n         $em-> flush();\n         return $this->json(\"success\", JsonResponse::HTTP_OK);\n"
                },
                {
                    "date": 1691751035902,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -34,9 +34,9 @@\n         // Désérialiser l'objet Entreprise à partir des données JSON\n         $object = $serializer->deserialize($request->getContent(), Contact::class, 'json');\n         $object->setCreatedAt(new \\DateTime());\n         $object->setStatus(false);\n-        $object->setStatus(false);\n+        $object->setNotification(false);\n         // Persister l'objet Entreprise et les utilisateurs\n         $em->persist($object);\n         $em-> flush();\n         return $this->json(\"success\", JsonResponse::HTTP_OK);\n"
                },
                {
                    "date": 1691751320825,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -34,9 +34,9 @@\n         // Désérialiser l'objet Entreprise à partir des données JSON\n         $object = $serializer->deserialize($request->getContent(), Contact::class, 'json');\n         $object->setCreatedAt(new \\DateTime());\n         $object->setStatus(false);\n-        $object->setNotification(false);\n+        $object->setNotification(ture);\n         // Persister l'objet Entreprise et les utilisateurs\n         $em->persist($object);\n         $em-> flush();\n         return $this->json(\"success\", JsonResponse::HTTP_OK);\n"
                },
                {
                    "date": 1691753116449,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -34,16 +34,32 @@\n         // Désérialiser l'objet Entreprise à partir des données JSON\n         $object = $serializer->deserialize($request->getContent(), Contact::class, 'json');\n         $object->setCreatedAt(new \\DateTime());\n         $object->setStatus(false);\n-        $object->setNotification(ture);\n+        $object->setNotification(true);\n         // Persister l'objet Entreprise et les utilisateurs\n         $em->persist($object);\n         $em-> flush();\n         return $this->json(\"success\", JsonResponse::HTTP_OK);\n     }\n \n     /**\n+     * @Route(\"/api/contacts\", name=\"app_create_contact\", methods={\"POST\"})\n+     */\n+    public function createContact(Request $request ,EntityManagerInterface $em ,SerializerInterface $serializer): Response\n+    {\n+        // Désérialiser l'objet Entreprise à partir des données JSON\n+        $object = $serializer->deserialize($request->getContent(), Contact::class, 'json');\n+        $object->setCreatedAt(new \\DateTime());\n+        $object->setStatus(false);\n+        $object->setNotification(true);\n+        // Persister l'objet Entreprise et les utilisateurs\n+        $em->persist($object);\n+        $em-> flush();\n+        return $this->json(\"success\", JsonResponse::HTTP_OK);\n+    }\n+\n+    /**\n      * @Route(\"/api/contacts\", name=\"app_get_all_contact\", methods={\"GET\"})\n      */\n     public function getAllContact(Request $request, EntityManagerInterface $em): Response\n     {\n"
                },
                {
                    "date": 1691753124382,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -44,9 +44,9 @@\n \n     /**\n      * @Route(\"/api/contacts\", name=\"app_create_contact\", methods={\"POST\"})\n      */\n-    public function createContact(Request $request ,EntityManagerInterface $em ,SerializerInterface $serializer): Response\n+    public function resetN(Request $request ,EntityManagerInterface $em ,SerializerInterface $serializer): Response\n     {\n         // Désérialiser l'objet Entreprise à partir des données JSON\n         $object = $serializer->deserialize($request->getContent(), Contact::class, 'json');\n         $object->setCreatedAt(new \\DateTime());\n"
                },
                {
                    "date": 1691753149686,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -42,11 +42,11 @@\n         return $this->json(\"success\", JsonResponse::HTTP_OK);\n     }\n \n     /**\n-     * @Route(\"/api/contacts\", name=\"app_create_contact\", methods={\"POST\"})\n+     * @Route(\"/api/reset-notifications\", name=\"app_create_contact\", methods={\"POST\"})\n      */\n-    public function resetN(Request $request ,EntityManagerInterface $em ,SerializerInterface $serializer): Response\n+    public function resetNotification(Request $request ,EntityManagerInterface $em ,SerializerInterface $serializer): Response\n     {\n         // Désérialiser l'objet Entreprise à partir des données JSON\n         $object = $serializer->deserialize($request->getContent(), Contact::class, 'json');\n         $object->setCreatedAt(new \\DateTime());\n"
                },
                {
                    "date": 1691753156239,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -42,9 +42,9 @@\n         return $this->json(\"success\", JsonResponse::HTTP_OK);\n     }\n \n     /**\n-     * @Route(\"/api/reset-notifications\", name=\"app_create_contact\", methods={\"POST\"})\n+     * @Route(\"/api/reset-notifications\", name=\"app_reset-notifications\", methods={\"POST\"})\n      */\n     public function resetNotification(Request $request ,EntityManagerInterface $em ,SerializerInterface $serializer): Response\n     {\n         // Désérialiser l'objet Entreprise à partir des données JSON\n"
                },
                {
                    "date": 1691753336361,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -42,14 +42,13 @@\n         return $this->json(\"success\", JsonResponse::HTTP_OK);\n     }\n \n     /**\n-     * @Route(\"/api/reset-notifications\", name=\"app_reset-notifications\", methods={\"POST\"})\n+     * @Route(\"/api/reset-notifications\", name=\"app_reset_notifications\", methods={\"POST\"})\n      */\n     public function resetNotification(Request $request ,EntityManagerInterface $em ,SerializerInterface $serializer): Response\n     {\n-        // Désérialiser l'objet Entreprise à partir des données JSON\n-        $object = $serializer->deserialize($request->getContent(), Contact::class, 'json');\n+         $object = $serializer->deserialize($request->getContent(), Contact::class, 'json');\n         $object->setCreatedAt(new \\DateTime());\n         $object->setStatus(false);\n         $object->setNotification(true);\n         // Persister l'objet Entreprise et les utilisateurs\n"
                },
                {
                    "date": 1691753364568,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -45,18 +45,17 @@\n     /**\n      * @Route(\"/api/reset-notifications\", name=\"app_reset_notifications\", methods={\"POST\"})\n      */\n     public function resetNotification(Request $request ,EntityManagerInterface $em ,SerializerInterface $serializer): Response\n-    {\n-         $object = $serializer->deserialize($request->getContent(), Contact::class, 'json');\n-        $object->setCreatedAt(new \\DateTime());\n-        $object->setStatus(false);\n-        $object->setNotification(true);\n-        // Persister l'objet Entreprise et les utilisateurs\n-        $em->persist($object);\n-        $em-> flush();\n-        return $this->json(\"success\", JsonResponse::HTTP_OK);\n-    }\n+    // {\n+    //      $object = $serializer->deserialize($request->getContent(), Contact::class, 'json');\n+    //     $object->setCreatedAt(new \\DateTime());\n+    //     $object->setStatus(false);\n+    //     $object->setNotification(true);\n+    //      $em->persist($object);\n+    //     $em-> flush();\n+    //     return $this->json(\"success\", JsonResponse::HTTP_OK);\n+    // }\n \n     /**\n      * @Route(\"/api/contacts\", name=\"app_get_all_contact\", methods={\"GET\"})\n      */\n"
                },
                {
                    "date": 1691753370434,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -45,17 +45,17 @@\n     /**\n      * @Route(\"/api/reset-notifications\", name=\"app_reset_notifications\", methods={\"POST\"})\n      */\n     public function resetNotification(Request $request ,EntityManagerInterface $em ,SerializerInterface $serializer): Response\n-    // {\n-    //      $object = $serializer->deserialize($request->getContent(), Contact::class, 'json');\n-    //     $object->setCreatedAt(new \\DateTime());\n-    //     $object->setStatus(false);\n-    //     $object->setNotification(true);\n-    //      $em->persist($object);\n-    //     $em-> flush();\n-    //     return $this->json(\"success\", JsonResponse::HTTP_OK);\n-    // }\n+    {\n+        //  $object = $serializer->deserialize($request->getContent(), Contact::class, 'json');\n+        // $object->setCreatedAt(new \\DateTime());\n+        // $object->setStatus(false);\n+        // $object->setNotification(true);\n+        //  $em->persist($object);\n+        // $em-> flush();\n+        // return $this->json(\"success\", JsonResponse::HTTP_OK);\n+    }\n \n     /**\n      * @Route(\"/api/contacts\", name=\"app_get_all_contact\", methods={\"GET\"})\n      */\n"
                },
                {
                    "date": 1691753377489,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -53,8 +53,20 @@\n         // $object->setNotification(true);\n         //  $em->persist($object);\n         // $em-> flush();\n         // return $this->json(\"success\", JsonResponse::HTTP_OK);\n+        // Code pour réinitialiser les notifications dans la base de données\n+        // Assurez-vous d'adapter cela à votre modèle et gestionnaire de données\n+\n+         // $entityManager = $this->getDoctrine()->getManager();\n+        // $contacts = $entityManager->getRepository(Contact::class)->findAll();\n+        // foreach ($contacts as $contact) {\n+        //     $contact->setNotification(false);\n+        //     $entityManager->persist($contact);\n+        // }\n+        // $entityManager->flush();\n+\n+        return $this->json(['message' => 'Notifications réinitialisées']);\n     }\n \n     /**\n      * @Route(\"/api/contacts\", name=\"app_get_all_contact\", methods={\"GET\"})\n"
                },
                {
                    "date": 1691753383496,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -61,10 +61,10 @@\n         // $contacts = $entityManager->getRepository(Contact::class)->findAll();\n         // foreach ($contacts as $contact) {\n         //     $contact->setNotification(false);\n         //     $entityManager->persist($contact);\n-        // }\n-        // $entityManager->flush();\n+        }\n+        $entityManager->flush();\n \n         return $this->json(['message' => 'Notifications réinitialisées']);\n     }\n \n"
                },
                {
                    "date": 1691753391046,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -56,13 +56,13 @@\n         // return $this->json(\"success\", JsonResponse::HTTP_OK);\n         // Code pour réinitialiser les notifications dans la base de données\n         // Assurez-vous d'adapter cela à votre modèle et gestionnaire de données\n \n-         // $entityManager = $this->getDoctrine()->getManager();\n-        // $contacts = $entityManager->getRepository(Contact::class)->findAll();\n-        // foreach ($contacts as $contact) {\n-        //     $contact->setNotification(false);\n-        //     $entityManager->persist($contact);\n+         $entityManager = $this->getDoctrine()->getManager();\n+        $contacts = $entityManager->getRepository(Contact::class)->findAll();\n+        foreach ($contacts as $contact) {\n+            $contact->setNotification(false);\n+            $entityManager->persist($contact);\n         }\n         $entityManager->flush();\n \n         return $this->json(['message' => 'Notifications réinitialisées']);\n"
                },
                {
                    "date": 1693995978000,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -128,5 +128,43 @@\n         $em->flush();\n         return $this->json(\"success\", JsonResponse::HTTP_OK);\n \n     }\n+\n+    /**\n+ * @Route(\"/api/contacts/delete-multiple\", methods={\"DELETE\"})\n+ */\n+public function deleteMultipleContacts(Request $request, EntityManagerInterface $entityManager)\n+{\n+    // Récupérez les identifiants des contacts à supprimer depuis le corps de la requête\n+    $data = json_decode($request->getContent(), true);\n+\n+    // Vérifiez si 'contactIds' existe dans les données JSON reçues\n+    if (!isset($data['contactIds']) || !is_array($data['contactIds'])) {\n+        return new JsonResponse(['error' => 'Paramètre invalide'], JsonResponse::HTTP_BAD_REQUEST);\n+    }\n+\n+    $contactIds = $data['contactIds'];\n+\n+    // Votre logique de suppression des contacts ici\n+    // Utilisez $contactIds pour obtenir les identifiants des contacts à supprimer\n+    // Par exemple, avec Doctrine :\n+    \n+    $repository = $entityManager->getRepository(Contact::class);\n+\n+    foreach ($contactIds as $contactId) {\n+        $contact = $repository->find($contactId);\n+\n+        if (!$contact) {\n+            return new JsonResponse(['error' => 'Contact introuvable'], JsonResponse::HTTP_NOT_FOUND);\n+        }\n+\n+        // Suppression du contact\n+        $entityManager->remove($contact);\n+    }\n+\n+    $entityManager->flush();\n+\n+    // Retournez une réponse JSON appropriée\n+    return new JsonResponse(['message' => 'Contacts supprimés avec succès'], JsonResponse::HTTP_OK);\n+}\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1693996180026,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -129,42 +129,42 @@\n         return $this->json(\"success\", JsonResponse::HTTP_OK);\n \n     }\n \n-    /**\n- * @Route(\"/api/contacts/delete-multiple\", methods={\"DELETE\"})\n- */\n-public function deleteMultipleContacts(Request $request, EntityManagerInterface $entityManager)\n-{\n-    // Récupérez les identifiants des contacts à supprimer depuis le corps de la requête\n-    $data = json_decode($request->getContent(), true);\n+        /**\n+     * @Route(\"/api/contacts/delete-multiple\", methods={\"DELETE\"})\n+     */\n+    public function deleteMultipleContacts(Request $request, EntityManagerInterface $entityManager)\n+    {\n+        // Récupérez les identifiants des contacts à supprimer depuis le corps de la requête\n+        $data = json_decode($request->getContent(), true);\n \n-    // Vérifiez si 'contactIds' existe dans les données JSON reçues\n-    if (!isset($data['contactIds']) || !is_array($data['contactIds'])) {\n-        return new JsonResponse(['error' => 'Paramètre invalide'], JsonResponse::HTTP_BAD_REQUEST);\n-    }\n+        // Vérifiez si 'contactIds' existe dans les données JSON reçues\n+        if (!isset($data['contactIds']) || !is_array($data['contactIds'])) {\n+            return new JsonResponse(['error' => 'Paramètre invalide'], JsonResponse::HTTP_BAD_REQUEST);\n+        }\n \n-    $contactIds = $data['contactIds'];\n+        $contactIds = $data['contactIds'];\n \n-    // Votre logique de suppression des contacts ici\n-    // Utilisez $contactIds pour obtenir les identifiants des contacts à supprimer\n-    // Par exemple, avec Doctrine :\n-    \n-    $repository = $entityManager->getRepository(Contact::class);\n+        // Votre logique de suppression des contacts ici\n+        // Utilisez $contactIds pour obtenir les identifiants des contacts à supprimer\n+        // Par exemple, avec Doctrine :\n+        \n+        $repository = $entityManager->getRepository(Contact::class);\n \n-    foreach ($contactIds as $contactId) {\n-        $contact = $repository->find($contactId);\n+        foreach ($contactIds as $contactId) {\n+            $contact = $repository->find($contactId);\n \n-        if (!$contact) {\n-            return new JsonResponse(['error' => 'Contact introuvable'], JsonResponse::HTTP_NOT_FOUND);\n+            if (!$contact) {\n+                return new JsonResponse(['error' => 'Contact introuvable'], JsonResponse::HTTP_NOT_FOUND);\n+            }\n+\n+            // Suppression du contact\n+            $entityManager->remove($contact);\n         }\n \n-        // Suppression du contact\n-        $entityManager->remove($contact);\n+        $entityManager->flush();\n+\n+        // Retournez une réponse JSON appropriée\n+        return new JsonResponse(['message' => 'Contacts supprimés avec succès'], JsonResponse::HTTP_OK);\n     }\n-\n-    $entityManager->flush();\n-\n-    // Retournez une réponse JSON appropriée\n-    return new JsonResponse(['message' => 'Contacts supprimés avec succès'], JsonResponse::HTTP_OK);\n-}\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1693996198304,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -129,10 +129,10 @@\n         return $this->json(\"success\", JsonResponse::HTTP_OK);\n \n     }\n \n-        /**\n-     * @Route(\"/api/contacts/delete-multiple\", methods={\"DELETE\"})\n+    /**\n+     * @Route(\"/api/contacts/delete-multiple\", name=\"app_delete_contact\", methods={\"DELETE\"})\n      */\n     public function deleteMultipleContacts(Request $request, EntityManagerInterface $entityManager)\n     {\n         // Récupérez les identifiants des contacts à supprimer depuis le corps de la requête\n"
                },
                {
                    "date": 1693996206074,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -130,9 +130,9 @@\n \n     }\n \n     /**\n-     * @Route(\"/api/contacts/delete-multiple\", name=\"app_delete_contact\", methods={\"DELETE\"})\n+     * @Route(\"/api/contacts/delete-multiple\", name=\"app_delete_multiplecontact\", methods={\"DELETE\"})\n      */\n     public function deleteMultipleContacts(Request $request, EntityManagerInterface $entityManager)\n     {\n         // Récupérez les identifiants des contacts à supprimer depuis le corps de la requête\n"
                },
                {
                    "date": 1693996304639,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -130,9 +130,9 @@\n \n     }\n \n     /**\n-     * @Route(\"/api/contacts/delete-multiple\", name=\"app_delete_multiplecontact\", methods={\"DELETE\"})\n+     * @Route(\"/api/contacts/delete-multiple\", name=\"app_delete_multiple_contact\")\n      */\n     public function deleteMultipleContacts(Request $request, EntityManagerInterface $entityManager)\n     {\n         // Récupérez les identifiants des contacts à supprimer depuis le corps de la requête\n"
                }
            ],
            "date": 1691748626030,
            "name": "Commit-0",
            "content": "<?php\n\nnamespace App\\Controller;\n\nuse Symfony\\Bundle\\FrameworkBundle\\Controller\\AbstractController;\nuse Symfony\\Component\\HttpFoundation\\Response;\nuse Symfony\\Component\\Routing\\Annotation\\Route;\nuse App\\Entity\\Contact;\nuse Doctrine\\ORM\\EntityManagerInterface;\nuse Symfony\\Component\\HttpFoundation\\JsonResponse;\nuse Symfony\\Component\\HttpFoundation\\Request;\nuse Symfony\\Component\\PasswordHasher\\Hasher\\UserPasswordHasherInterface;\nuse Symfony\\Component\\Serializer\\Normalizer\\AbstractNormalizer;\nuse Symfony\\Component\\Serializer\\SerializerInterface;\n\n\nclass ContactController extends AbstractController\n{\n    /**\n     * @Route(\"/contact\", name=\"app_contact\")\n     */\n    public function index(): Response\n    {\n        return $this->render('contact/index.html.twig', [\n            'controller_name' => 'ContactController',\n        ]);\n    }\n\n    /**\n     * @Route(\"/api/contacts\", name=\"app_create_contact\", methods={\"POST\"})\n     */\n    public function createContact(Request $request ,EntityManagerInterface $em ,SerializerInterface $serializer): Response\n    {\n        // Désérialiser l'objet Entreprise à partir des données JSON\n        $object = $serializer->deserialize($request->getContent(), Contact::class, 'json');\n        $object->setCreatedAt(new \\DateTime());\n        $object->setStatus(false);\n        $object->setStatus(false);\n        // Persister l'objet Entreprise et les utilisateurs\n        $em->persist($object);\n        $em-> flush();\n        return $this->json(\"success\", JsonResponse::HTTP_OK);\n    }\n\n    /**\n     * @Route(\"/api/contacts\", name=\"app_get_all_contact\", methods={\"GET\"})\n     */\n    public function getAllContact(Request $request, EntityManagerInterface $em): Response\n    {\n        $find = $em->getRepository(Contact::class)->findAll();\n        return $this->json($find,200);\n\n    }\n\n    /**\n     * @Route(\"/api/contacts/status\", name=\"app_get_status_contact\", methods={\"GET\"})\n     */\n    public function getStatusContact(Request $request, EntityManagerInterface $em): Response\n    {\n        $find = $em->getRepository(Contact::class)->findBy(['status'=>false]);\n        return $this->json($find,200);\n\n    }\n\n    /**\n     * @Route(\"/api/contacts/{id}\", name=\"app_edit_contact\", methods={\"PUT\"})\n     */\n    public function editContacts($id, Request $request, SerializerInterface $serializer, EntityManagerInterface $em): Response\n    {\n        $contact = $em->getRepository(Contact::class)->findOneBy([\"id\"=>$id]);\n        $contact2 = $serializer->deserialize($request->getContent(), \n                Contact::class, \n                'json',\n                [\n                    'object_to_populate' => $contact\n                ] \n                );\n        \n        $em->flush();\n        return $this->json($contact2,200);\n\n    }\n\n    /**\n     * @Route(\"/api/contacts/{id}\", name=\"app_get_contact\", methods={\"GET\"})\n     */\n    public function getContact($id, Request $request, EntityManagerInterface $em): Response\n    {\n        $contact = $em->getRepository(Contact::class)->findOneBy([\"id\"=>$id]);\n        return $this->json($contact,200);\n\n    }\n\n\n    /**\n     * @Route(\"/api/contacts/{id}\", name=\"app_delete_contact\", methods={\"DELETE\"})\n     */\n    public function deleteContact($id, Request $request, EntityManagerInterface $em): Response\n    {\n        $contact = $em->getRepository(Contact::class)->findOneBy([\"id\"=>$id]);\n        $em->remove($contact);\n        $em->flush();\n        return $this->json(\"success\", JsonResponse::HTTP_OK);\n\n    }\n}"
        }
    ]
}
{
    "sourceFile": "src/Controller/DepotController.php",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 2,
            "patches": [
                {
                    "date": 1692785131129,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1692785155511,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -42,11 +42,11 @@\n         // Désérialiser l'objet Depot à partir des données JSON\n         $object = $serializer->deserialize($request->getContent(), Depot::class, 'json');\n \n         $user = $em->getRepository(User::class)->findOneBy([\"id\"=>$data['user']['id']]);\n-        $product->setUser($user);\n-        foreach($product->getCategories() as $item){\n-            $product->removeCategory($item);\n+        $object->setUser($user);\n+        foreach($object->getCategories() as $item){\n+            $object->removeCategory($item);\n         }\n         //$object->setEnable(false);\n         // Persister l'objet Depot et les utilisateurs\n         $object->setEntreprise($entrepprise);\n"
                },
                {
                    "date": 1692785224511,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -41,13 +41,9 @@\n \n         // Désérialiser l'objet Depot à partir des données JSON\n         $object = $serializer->deserialize($request->getContent(), Depot::class, 'json');\n \n-        $user = $em->getRepository(User::class)->findOneBy([\"id\"=>$data['user']['id']]);\n-        $object->setUser($user);\n-        foreach($object->getCategories() as $item){\n-            $object->removeCategory($item);\n-        }\n+        \n         //$object->setEnable(false);\n         // Persister l'objet Depot et les utilisateurs\n         $object->setEntreprise($entrepprise);\n         $em->persist($object);\n"
                }
            ],
            "date": 1692785131129,
            "name": "Commit-0",
            "content": "<?php\n\nnamespace App\\Controller;\n\nuse Symfony\\Bundle\\FrameworkBundle\\Controller\\AbstractController;\nuse Symfony\\Component\\HttpFoundation\\Response;\nuse Symfony\\Component\\Routing\\Annotation\\Route;\nuse App\\Entity\\Depot;\nuse App\\Entity\\Entreprise;\nuse App\\Entity\\User;\nuse Doctrine\\ORM\\EntityManagerInterface;\nuse Symfony\\Component\\HttpFoundation\\JsonResponse;\nuse Symfony\\Component\\HttpFoundation\\Request;\nuse Symfony\\Component\\PasswordHasher\\Hasher\\UserPasswordHasherInterface;\nuse Symfony\\Component\\Serializer\\Normalizer\\AbstractNormalizer;\nuse Symfony\\Component\\Serializer\\SerializerInterface;\nuse App\\Repository\\UserRepository;\nuse App\\Repository\\EntrepriseRepository;\n\n\nclass DepotController extends AbstractController\n{\n    /**\n     * @Route(\"/depot\", name=\"app_depot\")\n     */\n    public function index(): Response\n    {\n        return $this->render('depot/index.html.twig', [\n            'controller_name' => 'DepotController',\n        ]);\n    }\n\n    /**\n     * @Route(\"/api/depots\", name=\"app_create_depot\", methods={\"POST\"})\n     */\n    public function createDepot(Request $request ,EntityManagerInterface $em ,SerializerInterface $serializer): Response\n    {\n        $data = json_decode($request->getContent(), true);\n        $entrepprise = $em->getRepository(Entreprise::class)->findOneBy([\"id\"=>$data['entreprise']['id']]);\n\n\n        // Désérialiser l'objet Depot à partir des données JSON\n        $object = $serializer->deserialize($request->getContent(), Depot::class, 'json');\n\n        $user = $em->getRepository(User::class)->findOneBy([\"id\"=>$data['user']['id']]);\n        $product->setUser($user);\n        foreach($product->getCategories() as $item){\n            $product->removeCategory($item);\n        }\n        //$object->setEnable(false);\n        // Persister l'objet Depot et les utilisateurs\n        $object->setEntreprise($entrepprise);\n        $em->persist($object);\n        $em-> flush();\n        return $this->json(\"success\", JsonResponse::HTTP_OK);\n    }\n\n    /**\n     * @Route(\"/api/depots\", name=\"app_get_all_depot\", methods={\"GET\"})\n     */\n    public function getAllDepot(Request $request, EntityManagerInterface $em): Response\n    {\n        $find = $em->getRepository(Depot::class)->findAll();\n        return $this->json($find,200, [], ['groups' => 'read:depot']);\n\n    }\n\n   /**\n     * @Route(\"/api/depots/user\", name=\"app_get_all_depot_user\", methods={\"POST\"})\n     */\n    public function getAllDepotUser(Request $request, UserRepository $userRepository, EntrepriseRepository $er): Response\n    {\n        $data = json_decode($request->getContent(), true);\n\n        $user = $userRepository->findOneBy(['email' => $data['email']]);\n\n        if (!$user) {\n            return new JsonResponse(['message' => 'Utilisateur non trouvé.'], 404);\n        }\n        \n        $entrep = $er->findOneBy(['id' => $user->getEntreprise()->getId()]);\n\n        $depots = $entrep->getDepots();\n\n        return $this->json($depots, 200, [], ['groups' => 'read:depot']);\n    }\n\n    /**\n     * @Route(\"/api/depots/{id}\", name=\"app_edit_depot\", methods={\"PUT\"})\n     */\n    public function editDepots($id, Request $request, SerializerInterface $serializer, EntityManagerInterface $em): Response\n    {\n\n        $data = json_decode($request->getContent(), true);\n        //dump( );\n        $entrepprise = $em->getRepository(Entreprise::class)->findOneBy([\"id\"=>$data['entreprise']['id']]);\n\n        $depot = $em->getRepository(Depot::class)->findOneBy([\"id\"=>$id]);\n        $serializer->deserialize($request->getContent(), \n                Depot::class, \n                'json',\n                [\n                    'groups' => ['read:depot'],\n                    'object_to_populate' => $depot\n                ] \n                );\n\n\n\n         //  dump( $depot ) ;die;    \n           $depot->setEntreprise( $entrepprise);\n           //dump($depot);die;\n           $em->persist($depot);\n\n        $em->flush();\n        return $this->json($depot,200,[], ['groups' => 'read:depot']);\n\n    }\n\n    /**\n     * @Route(\"/api/depots/{id}\", name=\"app_get_depot\", methods={\"GET\"})\n     */\n    public function getDepot($id, Request $request, EntityManagerInterface $em): Response\n    {\n        $depot = $em->getRepository(Depot::class)->findOneBy([\"id\"=>$id]);\n        return $this->json($depot,200, [], ['groups' => 'read:depot']);\n\n    }\n\n\n    /**\n     * @Route(\"/api/depots/{id}\", name=\"app_delete_depot\", methods={\"DELETE\"})\n     */\n    public function deleteDepot($id, Request $request, EntityManagerInterface $em): Response\n    {\n        $depot = $em->getRepository(Depot::class)->findOneBy([\"id\"=>$id]);\n        $em->remove($depot);\n        $em->flush();\n        return $this->json(\"success\", JsonResponse::HTTP_OK);\n\n    }\n}"
        }
    ]
}
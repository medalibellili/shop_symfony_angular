{
    "sourceFile": "src/Controller/ProductController.php",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 4,
            "patches": [
                {
                    "date": 1690964380362,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1692192076975,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,8 +7,10 @@\n use Symfony\\Component\\Routing\\Annotation\\Route;\n use App\\Entity\\Product;\n use App\\Entity\\User;\n use App\\Entity\\Category;\n+use App\\Entity\\Depot;\n+use App\\Entity\\Declinaison;\n use Doctrine\\ORM\\EntityManagerInterface;\n use Symfony\\Component\\HttpFoundation\\JsonResponse;\n use Symfony\\Component\\HttpFoundation\\Request;\n use Symfony\\Component\\PasswordHasher\\Hasher\\UserPasswordHasherInterface;\n@@ -35,25 +37,16 @@\n     public function createProduct(Request $request ,EntityManagerInterface $em ,SerializerInterface $serializer): Response\n     {\n \n             // Désérialiser l'objet Entreprise à partir des données JSON\n+\n         $data = json_decode($request->getContent(), true);\n-        //dd($data);\n-       \n+        //dd($request->getContent());\n+        \n \n         $product = $serializer->deserialize($request->getContent(), Product::class, 'json');\n-        // $product = new Product();\n-        // $item=json_decode($request->getContent(),true);\n-        // $product->setNomProduit($item[\"nomProduit\"]);\n-        // $product->setShortDescription($item[\"shortDescription\"]);\n-        // $product->setLongDescription($item[\"longDescription\"]);\n-        // $product->setPhotoProduit($item[\"photoProduit\"]);\n-        // $product->setLinkVideo($item[\"linkVideo\"]);\n-        // $product->setType($item[\"type\"]);\n-        // $product->setSlug($item[\"slug\"]);\n-        // $product->setMetaTitle($item[\"metaTitle\"]);\n-        // $product->setMetaDescription($item[\"metaDescription\"]);\n-        // $product->setMetaKeyword($item[\"metaKeyword\"]);\n+        \n+         \n         $product->setStatus(false);\n \n         // $userData = $item[\"user\"];\n         // $user = new User();\n@@ -72,15 +65,28 @@\n        $user = $em->getRepository(User::class)->findOneBy([\"id\"=>$data['user']['id']]);\n         $product->setUser($user);\n         foreach($product->getCategories() as $item){\n             $product->removeCategory($item);\n-           }\n+        }\n \n         foreach($data['categories'] as $item){\n             $cat = $em->getRepository(Category::class)->findOneBy([\"id\"=>$item['id']]);\n             $product->addCategory($cat);\n-           }\n+        }\n+\n+        $listStock=$data['declinaison'];\n         \n+        foreach($product->getDeclinaison() as $i=>$item){\n+            //$product->removeDeclinaison($item);\n+            foreach($item->getStock() as $j=>$item2){\n+                $item2->setDepot(null);\n+                $index=$listStock[$i]['stock'][$j]['depot']['id'];\n+                $depot = $em->getRepository(Depot::class)->findOneBy([\"id\"=>$index]);\n+                $item2->setDepot($depot);\n+            }\n+        }\n+        \n+        \n         $em->persist($product);\n         $em-> flush();\n         \n         return $this->json(\"success\", JsonResponse::HTTP_OK);\n@@ -115,20 +121,99 @@\n      * @Route(\"/api/products/{id}\", name=\"app_edit_product\", methods={\"PUT\"})\n      */\n     public function editProducts($id, Request $request, SerializerInterface $serializer, EntityManagerInterface $em): Response\n     {\n-        $product = $em->getRepository(Product::class)->findOneBy([\"id\"=>$id]);\n-        $product2 = $serializer->deserialize($request->getContent(), \n-                Product::class, \n-                'json',\n-                [\n-                    'object_to_populate' => $product\n-                ] \n-                );\n+        // $product = $em->getRepository(Product::class)->findOneBy([\"id\"=>$id]);\n+        // $product2 = $serializer->deserialize($request->getContent(), \n+        //         Product::class, \n+        //         'json',\n+        //         [\n+        //             'object_to_populate' => $product\n+        //         ] \n+        //         );\n         \n-        $em->flush();\n-        return $this->json($product2,200, [], ['groups' => 'read:product']);\n+        // $em->flush();\n+        // return $this->json($product2,200, [], ['groups' => 'read:product']);\n+               // Désérialiser l'objet Entreprise à partir des données JSON\n \n+               $data = json_decode($request->getContent(), true);\n+               //dd($request->getContent());\n+               \n+       \n+               $product = $serializer->deserialize($request->getContent(), Product::class, 'json');\n+               \n+               // $product = new Product();\n+               // $item=json_decode($request->getContent(),true);\n+               // $product->setNomProduit($item[\"nomProduit\"]);\n+               // $product->setShortDescription($item[\"shortDescription\"]);\n+               // $product->setLongDescription($item[\"longDescription\"]);\n+               // $product->setPhotoProduit($item[\"photoProduit\"]);\n+               // $product->setLinkVideo($item[\"linkVideo\"]);\n+               // $product->setType($item[\"type\"]);\n+               // $product->setSlug($item[\"slug\"]);\n+               // $product->setMetaTitle($item[\"metaTitle\"]);\n+               // $product->setMetaDescription($item[\"metaDescription\"]);\n+               // $product->setMetaKeyword($item[\"metaKeyword\"]);\n+               //$product->setStatus(false);\n+       \n+               // $userData = $item[\"user\"];\n+               // $user = new User();\n+               // $user->setId($userData[\"id\"]); \n+               // $user->setEmail($userData[\"email\"]); \n+               // $user->setRoles($userData[\"roles\"]); \n+               // $user->setPassword($userData[\"password\"]); \n+               // $user->setCivility($userData[\"civility\"]); \n+               // $user->setNomComplet($userData[\"nomComplet\"]); \n+               // $user->setTel($userData[\"tel\"]); \n+               // $user->setToken($userData[\"token\"]); \n+               // $user->setEnable($userData[\"enable\"]); \n+               // $user->setConfirm($userData[\"confirm\"]); \n+               \n+              // dd($user);\n+              $user = $em->getRepository(User::class)->findOneBy([\"id\"=>$data['user']['id']]);\n+               $product->setUser($user);\n+               foreach($product->getCategories() as $item){\n+                   $product->removeCategory($item);\n+               }\n+       \n+               foreach($data['categories'] as $item){\n+                   $cat = $em->getRepository(Category::class)->findOneBy([\"id\"=>$item['id']]);\n+                   $product->addCategory($cat);\n+               }\n+\n+               foreach($product->getDeclinaison() as $item){\n+                $product->removeDeclinaison($item);\n+            }\n+            \n+            foreach($data['declinaison'] as $item){\n+                \n+                $cat = $em->getRepository(Declinaison::class)->findOneBy([\"id\"=>$item['id']]);\n+                //dd($cat);\n+                $product->addDeclinaison($cat);\n+            }\n+            \n+               $listStock=$data['declinaison'];\n+               \n+               foreach($product->getDeclinaison() as $i=>$item){\n+                   //$product->removeDeclinaison($item);\n+                   foreach($item->getStock() as $j=>$item2){\n+                       $item2->setDepot(null);\n+                       \n+                       $index=$listStock[$i]['stock'][$j]['depot']['id'];\n+                       if($index){\n+                        $depot = $em->getRepository(Depot::class)->findOneBy([\"id\"=>$index]);\n+                        $item2->setDepot($depot);\n+                       }\n+                       \n+                   }\n+               }\n+               \n+               \n+               $em->persist($product);\n+               $em-> flush();\n+               \n+               return $this->json(\"success\", JsonResponse::HTTP_OK);\n+\n     }\n \n     /**\n      * @Route(\"/api/products/{id}\", name=\"app_get_product\", methods={\"GET\"})\n"
                },
                {
                    "date": 1692192082826,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -36,33 +36,19 @@\n      */\n     public function createProduct(Request $request ,EntityManagerInterface $em ,SerializerInterface $serializer): Response\n     {\n \n-            // Désérialiser l'objet Entreprise à partir des données JSON\n+            // Désérialiser l'objet Entreprise  à partir des données JSON\n \n         $data = json_decode($request->getContent(), true);\n-        //dd($request->getContent());\n-        \n+         \n \n         $product = $serializer->deserialize($request->getContent(), Product::class, 'json');\n         \n          \n         $product->setStatus(false);\n \n-        // $userData = $item[\"user\"];\n-        // $user = new User();\n-        // $user->setId($userData[\"id\"]); \n-        // $user->setEmail($userData[\"email\"]); \n-        // $user->setRoles($userData[\"roles\"]); \n-        // $user->setPassword($userData[\"password\"]); \n-        // $user->setCivility($userData[\"civility\"]); \n-        // $user->setNomComplet($userData[\"nomComplet\"]); \n-        // $user->setTel($userData[\"tel\"]); \n-        // $user->setToken($userData[\"token\"]); \n-        // $user->setEnable($userData[\"enable\"]); \n-        // $user->setConfirm($userData[\"confirm\"]); \n         \n-       // dd($user);\n        $user = $em->getRepository(User::class)->findOneBy([\"id\"=>$data['user']['id']]);\n         $product->setUser($user);\n         foreach($product->getCategories() as $item){\n             $product->removeCategory($item);\n"
                },
                {
                    "date": 1692192294238,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -36,10 +36,9 @@\n      */\n     public function createProduct(Request $request ,EntityManagerInterface $em ,SerializerInterface $serializer): Response\n     {\n \n-            // Désérialiser l'objet Entreprise  à partir des données JSON\n-\n+   \n         $data = json_decode($request->getContent(), true);\n          \n \n         $product = $serializer->deserialize($request->getContent(), Product::class, 'json');\n@@ -58,8 +57,12 @@\n             $cat = $em->getRepository(Category::class)->findOneBy([\"id\"=>$item['id']]);\n             $product->addCategory($cat);\n         }\n \n+        if (!array_key_exists('declinaison', $data)) {\n+            return $this->json(\"Missing 'declinaison' key in request data.\", JsonResponse::HTTP_BAD_REQUEST);\n+        }\n+\n         $listStock=$data['declinaison'];\n         \n         foreach($product->getDeclinaison() as $i=>$item){\n             //$product->removeDeclinaison($item);\n"
                },
                {
                    "date": 1692192308896,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -36,9 +36,10 @@\n      */\n     public function createProduct(Request $request ,EntityManagerInterface $em ,SerializerInterface $serializer): Response\n     {\n \n-   \n+            // Désérialiser l'objet Entreprise  à partir des données JSON\n+  \n         $data = json_decode($request->getContent(), true);\n          \n \n         $product = $serializer->deserialize($request->getContent(), Product::class, 'json');\n@@ -57,12 +58,8 @@\n             $cat = $em->getRepository(Category::class)->findOneBy([\"id\"=>$item['id']]);\n             $product->addCategory($cat);\n         }\n \n-        if (!array_key_exists('declinaison', $data)) {\n-            return $this->json(\"Missing 'declinaison' key in request data.\", JsonResponse::HTTP_BAD_REQUEST);\n-        }\n-\n         $listStock=$data['declinaison'];\n         \n         foreach($product->getDeclinaison() as $i=>$item){\n             //$product->removeDeclinaison($item);\n"
                }
            ],
            "date": 1690964380362,
            "name": "Commit-0",
            "content": "<?php\n\nnamespace App\\Controller;\n\nuse Symfony\\Bundle\\FrameworkBundle\\Controller\\AbstractController;\nuse Symfony\\Component\\HttpFoundation\\Response;\nuse Symfony\\Component\\Routing\\Annotation\\Route;\nuse App\\Entity\\Product;\nuse App\\Entity\\User;\nuse App\\Entity\\Category;\nuse Doctrine\\ORM\\EntityManagerInterface;\nuse Symfony\\Component\\HttpFoundation\\JsonResponse;\nuse Symfony\\Component\\HttpFoundation\\Request;\nuse Symfony\\Component\\PasswordHasher\\Hasher\\UserPasswordHasherInterface;\nuse Symfony\\Component\\Serializer\\Normalizer\\AbstractNormalizer;\nuse Symfony\\Component\\Serializer\\SerializerInterface;\n\n\n\nclass ProductController extends AbstractController\n{\n    /**\n     * @Route(\"/product\", name=\"app_product\")\n     */\n    public function index(): Response\n    {\n        return $this->render('product/index.html.twig', [\n            'controller_name' => 'ProductController',\n        ]);\n    }\n\n     /**\n     * @Route(\"/api/products\", name=\"app_create_product\", methods={\"POST\"})\n     */\n    public function createProduct(Request $request ,EntityManagerInterface $em ,SerializerInterface $serializer): Response\n    {\n\n            // Désérialiser l'objet Entreprise à partir des données JSON\n        $data = json_decode($request->getContent(), true);\n        //dd($data);\n       \n\n        $product = $serializer->deserialize($request->getContent(), Product::class, 'json');\n        // $product = new Product();\n        // $item=json_decode($request->getContent(),true);\n        // $product->setNomProduit($item[\"nomProduit\"]);\n        // $product->setShortDescription($item[\"shortDescription\"]);\n        // $product->setLongDescription($item[\"longDescription\"]);\n        // $product->setPhotoProduit($item[\"photoProduit\"]);\n        // $product->setLinkVideo($item[\"linkVideo\"]);\n        // $product->setType($item[\"type\"]);\n        // $product->setSlug($item[\"slug\"]);\n        // $product->setMetaTitle($item[\"metaTitle\"]);\n        // $product->setMetaDescription($item[\"metaDescription\"]);\n        // $product->setMetaKeyword($item[\"metaKeyword\"]);\n        $product->setStatus(false);\n\n        // $userData = $item[\"user\"];\n        // $user = new User();\n        // $user->setId($userData[\"id\"]); \n        // $user->setEmail($userData[\"email\"]); \n        // $user->setRoles($userData[\"roles\"]); \n        // $user->setPassword($userData[\"password\"]); \n        // $user->setCivility($userData[\"civility\"]); \n        // $user->setNomComplet($userData[\"nomComplet\"]); \n        // $user->setTel($userData[\"tel\"]); \n        // $user->setToken($userData[\"token\"]); \n        // $user->setEnable($userData[\"enable\"]); \n        // $user->setConfirm($userData[\"confirm\"]); \n        \n       // dd($user);\n       $user = $em->getRepository(User::class)->findOneBy([\"id\"=>$data['user']['id']]);\n        $product->setUser($user);\n        foreach($product->getCategories() as $item){\n            $product->removeCategory($item);\n           }\n\n        foreach($data['categories'] as $item){\n            $cat = $em->getRepository(Category::class)->findOneBy([\"id\"=>$item['id']]);\n            $product->addCategory($cat);\n           }\n        \n        $em->persist($product);\n        $em-> flush();\n        \n        return $this->json(\"success\", JsonResponse::HTTP_OK);\n    }\n\n    \n\n    /**\n * @Route(\"/api/products\", name=\"app_get_all_product\", methods={\"GET\"})\n */\npublic function getAllProducts(Request $request, EntityManagerInterface $em): Response\n{\n    $productRepository = $em->getRepository(Product::class);\n\n    // Récupérez les produits triés par ordre décroissant d'ID d'insertion\n    $products = $productRepository->findBy([], ['id' => 'DESC']);\n\n    return $this->json($products, 200, [], ['groups' => 'read:product']);\n}\n\n    /**\n     * @Route(\"/api/productsWithStock\", name=\"app_get_all_product_with_stock\", methods={\"GET\"})\n     */\n    public function getAllProductsWithStock(Request $request, EntityManagerInterface $em): Response\n    {\n        $find = $em->getRepository(Product::class)->findAll();\n        return $this->json($find,200, [], ['groups' => 'read:withStock']);\n\n    }\n\n    /**\n     * @Route(\"/api/products/{id}\", name=\"app_edit_product\", methods={\"PUT\"})\n     */\n    public function editProducts($id, Request $request, SerializerInterface $serializer, EntityManagerInterface $em): Response\n    {\n        $product = $em->getRepository(Product::class)->findOneBy([\"id\"=>$id]);\n        $product2 = $serializer->deserialize($request->getContent(), \n                Product::class, \n                'json',\n                [\n                    'object_to_populate' => $product\n                ] \n                );\n        \n        $em->flush();\n        return $this->json($product2,200, [], ['groups' => 'read:product']);\n\n    }\n\n    /**\n     * @Route(\"/api/products/{id}\", name=\"app_get_product\", methods={\"GET\"})\n     */\n    public function getProduct($id, Request $request, EntityManagerInterface $em): Response\n    {\n        $product = $em->getRepository(Product::class)->findOneBy([\"id\"=>$id]);\n        return $this->json($product,200, [], ['groups' => 'read:product']);\n\n    }\n\n\n    /**\n     * @Route(\"/api/products/{id}\", name=\"app_delete_product\", methods={\"DELETE\"})\n     */\n    public function deleteProduct($id, Request $request, EntityManagerInterface $em): Response\n    {\n        $product = $em->getRepository(Product::class)->findOneBy([\"id\"=>$id]);\n        $em->remove($product);\n        $em->flush();\n        return $this->json(\"success\", JsonResponse::HTTP_OK);\n\n    }\n}"
        }
    ]
}